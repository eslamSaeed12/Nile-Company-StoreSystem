// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    Int
}

model Role {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @unique
  User      User[]
}

model Shipper {
  id                  Int      @id @default(autoincrement())
  shipper_name        String   @unique
  shipper_addresse    String
  shipper_phoneNumber String
  notes               String?
  orders              Order[]  @relation
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Customer {
  id                   Int      @id @default(autoincrement())
  customer_name        String   @unique
  customer_addresse    String
  customer_phoneNumber String
  isProvider           Boolean
  orders               Order[]
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Product {
  id                  Int                @id @default(autoincrement())
  product_name        String             @unique
  product_description String
  quantity            Int
  price               Int
  price_unit          String
  notes               String?
  category            Category           @relation(fields: [categoryId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  categoryId          Int
  orders              ProductsOnOrders[]
}

model ProductsOnOrders {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  assignedAt DateTime @default(now())

  @@id([productId, orderId])
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Supplier {
  id                   Int      @id @default(autoincrement())
  Supplier_name        String   @unique
  Supplier_company     String   @unique
  supplier_addresse    String
  supplier_phoneNumber String
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  supplied_orders      Order[]
}

enum ORDER_STATE {
  PENDING
  FAIL
  DONE
}

enum PAID_UNIT {
  EP
}

model Order {
  id         Int                @id @default(autoincrement())
  state      ORDER_STATE        @default(PENDING)
  quantity   Int                @default(0)
  price      Int                @default(0)
  total      Int                @default(0)
  paindUnit  PAID_UNIT          @default(EP)
  notes      String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  Shipper    Shipper?           @relation(fields: [shipperId], references: [id])
  shipperId  Int?
  Customer   Customer?          @relation(fields: [customerId], references: [id])
  customerId Int?
  Supplier   Supplier?          @relation(fields: [supplierId], references: [id])
  supplierId Int?
  products   ProductsOnOrders[]
}
